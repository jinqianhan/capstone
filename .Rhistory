length(z)
z==" "
z==""
z==""| " "
z==""|| " "
s
x
y
y <- y[grepl('[[:alpha:]]', y)]
y
length(y)
y[1]
y[2]
y<- strsplit(x, " ")
y
length(y)
?unlist
y <- unlist(y)
y
length(y)
y[3]
x <- "hi my name is hank"
x <- rev(unlist(strsplit(x, " ")))
x
sapply(gregexpr("\\W+", x), function(x) sum(x>0)) +1 > 2
length(x)
length(x)>5
length(x)>2
!(is.null(predict4("hi u suck")))
is.null(predict4("hi u suck"))
predict4("hi u suck")
predict4 <- function(word) {
if (is.null(ncol(maxfreq(cFreq4, word))))
return (NULL)
return (maxfreq(cFreq4, word)$cur[1])
}
predict4("hi u suck")
is.null(predict4("hi u suck"))
predict3 <- function(word) {
if (is.null(ncol(maxfreq(cFreq3, word))))
return (NULL)
return (maxfreq(cFreq3, word)$cur[1])
}
!(is.null(predict4("hi u suck")))
predict <- function(input){
if (input == "" || " ")
return("Warning, no input")
input <- tolower(input)
input <- removeNumbers(input)
input <- removePunctuation(input)
input <- stripWhitespace(input)
input <- rev(unlist(strsplit(input," ")))
#if (sapply(gregexpr("\\W+", input), function(x) sum(x>0)) +1 > 2){
if (length(input) > 2) {
input4 <- paste(input[3], input[2], input[1], sep = ' ')
input3 <- paste(input[2], input[1], sep = ' ')
input2 <- input[1]
if (is.null(predict4(input4)) && is.null(predict3(input3))) {
pred <- predict2(input2)
}
else if (!(is.null(predict3(input3)))) {
pred <- predict3(input3)
}
else {
pred <- predict4(input4)
}
}
if (is.null(pred))
return("unable to predict")
else
return (pred)
}
predict("happy")
predict <- function(input){
if (input == "" || input == " ")
return("Warning, no input")
input <- tolower(input)
input <- removeNumbers(input)
input <- removePunctuation(input)
input <- stripWhitespace(input)
input <- rev(unlist(strsplit(input," ")))
#if (sapply(gregexpr("\\W+", input), function(x) sum(x>0)) +1 > 2){
if (length(input) > 2) {
input4 <- paste(input[3], input[2], input[1], sep = ' ')
input3 <- paste(input[2], input[1], sep = ' ')
input2 <- input[1]
if (is.null(predict4(input4)) && is.null(predict3(input3))) {
pred <- predict2(input2)
}
else if (!(is.null(predict3(input3)))) {
pred <- predict3(input3)
}
else {
pred <- predict4(input4)
}
}
if (is.null(pred))
return("unable to predict")
else
return (pred)
}
predict("happy")
predict <- function(input){
if (input == "" || input == " ")
return("Warning, no input")
pred <- NULL
input <- tolower(input)
input <- removeNumbers(input)
input <- removePunctuation(input)
input <- stripWhitespace(input)
input <- rev(unlist(strsplit(input," ")))
#if (sapply(gregexpr("\\W+", input), function(x) sum(x>0)) +1 > 2){
if (length(input) > 2) {
input4 <- paste(input[3], input[2], input[1], sep = ' ')
input3 <- paste(input[2], input[1], sep = ' ')
input2 <- input[1]
if (is.null(predict4(input4)) && is.null(predict3(input3))) {
pred <- predict2(input2)
}
else if (!(is.null(predict3(input3)))) {
pred <- predict3(input3)
}
else {
pred <- predict4(input4)
}
}
if (is.null(pred))
return("unable to predict")
else
return (pred)
}
predict("happy")
predict <- function(input){
if (input == "" || input == " ")
return("Warning, no input")
pred <- NULL
input <- tolower(input)
input <- removeNumbers(input)
input <- removePunctuation(input)
input <- stripWhitespace(input)
input <- rev(unlist(strsplit(input," ")))
#if (sapply(gregexpr("\\W+", input), function(x) sum(x>0)) +1 > 2){
if (length(input) > 2) {
input4 <- paste(input[3], input[2], input[1], sep = ' ')
input3 <- paste(input[2], input[1], sep = ' ')
input2 <- input[1]
if (is.null(predict4(input4)) && is.null(predict3(input3))) {
pred <- predict2(input2)
}
else if (!(is.null(predict3(input3)))) {
pred <- predict3(input3)
}
else {
pred <- predict4(input4)
}
}
#         if (is.null(pred))
#                 return("unable to predict")
#         else
return (pred)
}
predict("happy")
predict <- function(input){
if (input == "" || input == " ")
return("Warning, no input")
pred <- NULL
input <- tolower(input)
input <- removeNumbers(input)
input <- removePunctuation(input)
input <- stripWhitespace(input)
input <- rev(unlist(strsplit(input," ")))
#if (sapply(gregexpr("\\W+", input), function(x) sum(x>0)) +1 > 2){
if (length(input) > 2) {
input4 <- paste(input[3], input[2], input[1], sep = ' ')
input3 <- paste(input[2], input[1], sep = ' ')
input2 <- input[1]
if (is.null(predict4(input4)) && is.null(predict3(input3))) {
pred <- predict2(input2)
}
else if (!(is.null(predict3(input3)))) {
pred <- predict3(input3)
}
else {
pred <- predict4(input4)
}
}
if (length(input) == 2) {
input3 <- paste(input[2], input[1], sep = ' ')
input2 <- input[1]
if (is.null(predict3(input3)) && is.null(predict2(input2))) {
pred <- predict2(input2)
}
else {
pred <- predict3(input3)
}
}
if (length(input) == 1) {
input2 <- input[1]
pred<-predict2(input2)
}
if (is.null(pred))
return("unable to predict")
else
return (pred)
}
predict("happy")
predict("happy birthday")
predict("happy birthday to")
predict("i wish you a safe and happy")
predict4("safe and happy")
predict3("and happy")
predict("i wish you a safe and happydag")
predict <- function(input){
if (input == "" || input == " ")
return("Warning, no input")
pred <- NULL
input <- tolower(input)
input <- removeNumbers(input)
input <- removePunctuation(input)
input <- stripWhitespace(input)
input <- rev(unlist(strsplit(input," ")))
#if (sapply(gregexpr("\\W+", input), function(x) sum(x>0)) +1 > 2){
if (length(input) > 2) {
input4 <- paste(input[3], input[2], input[1], sep = ' ')
input3 <- paste(input[2], input[1], sep = ' ')
input2 <- input[1]
if (is.null(predict4(input4)) && is.null(predict3(input3))) {
pred <- predict2(input2)
}
else if (!(is.null(predict4(input4)))) {
pred <- predict4(input4)
}
else {
pred <- predict3(input3)
}
}
if (length(input) == 2) {
input3 <- paste(input[2], input[1], sep = ' ')
input2 <- input[1]
if (is.null(predict3(input3)) && is.null(predict2(input2))) {
pred <- predict2(input2)
}
else {
pred <- predict3(input3)
}
}
if (length(input) == 1) {
input2 <- input[1]
pred<-predict2(input2)
}
if (is.null(pred))
return("unable to predict")
else
return (pred)
}
predict("i wish you a safe and happy")
predict("i wish you a safe and happy birthday")
predict("sadkf;")
predict("sadk3")
predict("4214")
predict("  ")
predict(" ")
predict("")
predict("hi")
predict("hi im")
predict("hi im back")
predict("hi im back i")
predict("hi im back i survived")
predict("hi im back i survived another")
predict("highenergy")
predict("highenergy shows")
predict("happy")
predict("happy birthday")
predict("happy birthday to")
predict("have you ever tried")
predict("have you ever tried eating")
predict("have you ever tried eating a")
predict("have you ever tried eating a bowl")
predict("have you ever tried eating a bowl of")
predict("drinking")
predict("drinking and")
predict("nick")
predict("nick and")
predict("nick and i")
predict("nick and i are")
predict("nick and i are going")
predict("nick and i are going to")
predict("nick and i are going to be")
predict("nick and i are going to be a")
predict("nick and i are going to be a good")
predict("nick and i are going to be a good thing")
shiny::runApp('~/CourseraDataSciSpec/Data Products/PA/DataProductsRepo')
shiny::runApp('~/CourseraDataSciSpec/Data Products')
predict("bernie sanders is going to")
predict("bernie sanders is going to be")
predict("bernie sanders is going to be a")
predict("bernie sanders is going to be a good")
predict("bernie sanders is going to be a good thing")
predict("bernie sanders is going to be a good thing for")
predict("bernie sanders is going to be a good thing for a")
predict("peleg is going to be an amazing")
predict("hank is a world renowned ")
predict("hank is a world renowned for ")
predict("hank is a world renowned for his ")
predict("hank is a world renowned for his ability ")
predict("hank is a world renowned for his ability to ")
predict("hank is a world renowned for his ability to handle ")
predict("hank is a world renowned for his ability to handle a ")
predict("hank is a world renowned for his ability to handle a crying")
shiny::runApp('~/GitHub/capstone')
shiny::runApp('~/GitHub/capstone')
shiny::runApp('~/GitHub/capstone')
shiny::runApp('~/GitHub/capstone')
shiny::runApp('~/GitHub/capstone')
shiny::runApp('~/GitHub/capstone')
shiny::runApp('~/GitHub/capstone')
shiny::runApp('~/GitHub/capstone')
shiny::runApp('~/GitHub/capstone')
shiny::runApp('~/GitHub/capstone')
shiny::runApp('~/GitHub/capstone')
head(cFreq2)
write.table(cFreq2, file="cFreq2.csv")
write.table(cFreq2, file="cFreq2.csv", row.names = F, col.names = F)
?write.table
write.table(cFreq2, file="cFreq2.csv", sep = " ")
ncol(cFreq2)
nrow(cFreq2)
write.csv(cFreq2, file="cFreq2.csv")
write.csv2(cFreq2, file="cFreq2.csv")
write.table(cFreq2, file="cFreq2.csv", sep="\t")
write.table(cFreq2, file="cFreq2.csv", sep = " ")
write.table(cFreq2, file="cFreq2.csv", sep="\t")
write.table(cFreq2, file="cFreq2.csv", row.names = F)
bigram <- read.table("cFreq2.csv", header=TRUE)
head(bigram)
head(cFreq2)
write.table(cFreq3, file="trigram.csv", row.names = F)
write.table(cFreq2, file="bigram.csv", sep="\t")
write.table(cFreq2, file="bigram.csv", row.names = F)
write.table(cFreq4, file="fourgram.csv", row.names = F)
rm(bigram)
shiny::runApp('~/GitHub/capstone')
rm(cFreq2, cFreq3, cFreq4)
shiny::runApp('~/GitHub/capstone')
shiny::runApp('~/GitHub/capstone')
shiny::runApp('~/GitHub/capstone')
?renderText
shiny::runApp('~/GitHub/capstone')
shiny::runApp('~/GitHub/capstone')
rm(ls())
rm(ls=all
)
rm(list = ls())
setwd("..")
setwd("..")
setwd("..")
setwd("..")
setwd("..")
setwd("GitHub/capstone/")
ls()
dir
dir()
dir()
bigram <- read.table("bigram.csv", header=TRUE)
trigram <- read.table("trigram.csv", header=TRUE)
fourgram <- read.table("fourgram.csv", header=TRUE)
predict2 <- function(word) {
if (is.null(ncol(maxfreq(bigram, word))))
return (NULL)
return (maxfreq(bigram, word)$cur[1])
}
#corpus trigram
# cFreq3 <- tdmToFreq(c3)
# processGram(cFreq3)
# # cFreq3[pre == "right" & freq == de_max]
# head(cFreq3)
predict3 <- function(word) {
if (is.null(ncol(maxfreq(trigram, word))))
return (NULL)
return (maxfreq(trigram, word)$cur[1])
}
#corpus 4gram
# cFreq4 <- tdmToFreq(c4)
# processGram(cFreq4)
# # cFreq4[pre == "right" & freq == de_max]
# head(cFreq4)
predict4 <- function(word) {
if (is.null(ncol(maxfreq(fourgram, word))))
return (NULL)
return (maxfreq(fourgram, word)$cur[1])
}
predict <- function(input){
if (input == "" || input == " ")
return("Warning, no input")
pred <- NULL
input <- tolower(input)
input <- removeNumbers(input)
input <- removePunctuation(input)
input <- stripWhitespace(input)
input <- rev(unlist(strsplit(input," ")))
#if (sapply(gregexpr("\\W+", input), function(x) sum(x>0)) +1 > 2){
if (length(input) > 2) {
input4 <- paste(input[3], input[2], input[1], sep = ' ')
input3 <- paste(input[2], input[1], sep = ' ')
input2 <- input[1]
if (is.null(predict4(input4)) && is.null(predict3(input3))) {
pred <- predict2(input2)
}
else if (!(is.null(predict4(input4)))) {
pred <- predict4(input4)
}
else {
pred <- predict3(input3)
}
}
if (length(input) == 2) {
input3 <- paste(input[2], input[1], sep = ' ')
input2 <- input[1]
if (is.null(predict3(input3)) && is.null(predict2(input2))) {
pred <- predict2(input2)
}
else {
pred <- predict3(input3)
}
}
if (length(input) == 1) {
input2 <- input[1]
pred<-predict2(input2)
}
if (is.null(pred))
return("unable to predict")
else
return (pred)
}
predict("happy")
maxfreq <- function(freqlist, wd) {
if (sum(freqlist[freqlist$pre == wd]$freq) == 0)
return (0)
else {
return (freqlist[freqlist$pre == wd & freqlist$freq == max(freqlist[freqlist$pre == wd]$freq)])
}
}
maxfreq <- function(freqlist, wd) {
if (sum(freqlist[freqlist$pre == wd]$freq) == 0)
return (0)
else {
return (freqlist[freqlist$pre == wd & freqlist$freq == max(freqlist[freqlist$pre == wd]$freq)])
}
}
predict("happy")
head(bigram)
ncol(0)
is.null(ncol(0))
bigram[bigram$pre == "happy"]
bigram[bigram$pre == "of"]
bigram[bigram$pre == "of"]$freq
bigram[bigram$pre == "of"]$freq
ncol(bigram)
nrow(bigram)
bigram[bigram$pre == "of",]
bigram[bigram$pre == "of",]$freq
bigram[bigram$pre == "of" & bigram$freq==max(bigram[bigram$pre == "of"]$freq)]
bigram[bigram$pre == "of" & bigram$freq==max(bigram[bigram$pre == "of",]$freq)]
max(bigram[bigram$pre == "of"])
head(bigram)
max(bigram[bigram$pre == "of"]$freq)
max(bigram[bigram$pre == "of",]$freq)
maxfreq <- function(freqlist, wd) {
if (sum(freqlist[freqlist$pre == wd,]$freq) == 0)
return (0)
else {
return (freqlist[freqlist$pre == wd & freqlist$freq == max(freqlist[freqlist$pre == wd,]$freq),])
}
}
maxfreq(bigram, "of")
predict("happy")
shiny::runApp()
x <- predict("happy")
x
factor(x)
drop.levels(x)
maxfreq(trigram, "happy birthday")
predict2("happy")
maxfreq(bigram, "happy")$cur
maxfreq(bigram, "happy")$cur[1]
maxfreq(bigram, "happy")$cur[2]
maxfreq(bigram, "happy")$cur[1]
maxfreq(bigram, "happy")$cur
maxfreq(bigram, "happy")
x<-maxfreq(bigram, "happy")
x
x$cur
class(x)
class(x$pre)
predict2 <- function(word) {
if (is.null(ncol(maxfreq(bigram, word))))
return (NULL)
return (as.character(maxfreq(bigram, word)$cur[1]))
}
predict3 <- function(word) {
if (is.null(ncol(maxfreq(trigram, word))))
return (NULL)
return (as.character(maxfreq(trigram, word)$cur[1]))
}
predict4 <- function(word) {
if (is.null(ncol(maxfreq(fourgram, word))))
return (NULL)
return as.character((maxfreq(fourgram, word)$cur[1]))
}
predict2(bigram, "happy")
predict2("happy")
shiny::runApp()
